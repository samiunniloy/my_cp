long long lg [1000009];
long long x[1000009];
long long sp[1000009][32];
long long mp[1000009];
void init()
{
    lg[1]=0;
    for(long long i=2; i<1000009; i++)
    {
        lg[i]=(lg[i/2])+1;
    }
}
void built(long long n)
{
    long long i,j,k;
    for(i=0; i<n; i++)sp[i][0]=x[i];
    for(j=1; j<31; j++)
    {
        for(i=0; i+(1<<j)<=n; i++)
        {
            sp[i][j]=__gcd(sp[i][j-1],sp[i+(1<<(j-1))][j-1]);
        }
    }
}
long long query(long long l,long long r)
{
    long long j=lg[r-l+1];
    return __gcd(sp[l][j],sp[r-(1<<j)+1][j]);

}
void fun()
{
    long long i,j,l,m,k,q,p,n;
    init();
    n=1000000;
    for(i=0; i<n; i++)x[i]=i+1;
    built(n);
    for(i=0; i<n; i++)
    {
        long long start=i;
        while(start<n)
        {
            long long ll=start,rr=n-1,mid;
            long long g=query(i,start);
            while(ll<rr)
            {
                mid=(ll+rr)/2;
                int val=query(i,mid);
                if(val>=g)ll=mid+1;
                else rr=mid;
            }
            mid=(ll+rr)/2;
            if(query(i,mid)<g)mid--;
            //  cout<<g<<" "<<mid<<" "<<i<<endl;
            mp[g]+=(mid-start+1);
            start=mid+1;
        }
    }
}
