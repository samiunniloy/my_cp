ll low[N],in[N],visited[N];
ll timer;
set<ll>ans;
vector<ll>v[N];

void dfs(ll node,ll par)
{
    visited[node] = 1;
    in[node] = low[node] = timer;
    timer++;
    ll children = 0;
    for(ll it : v[node])
    {
        if(it==par)continue;
        if(visited[it]==1)
        {
            // edge node - it    is a back-edge
            low[node] = min(low[node],in[it]);
        }
        else
        {
            // edge node - it    is a forward-edge
            dfs(it,node);
            low[node] = min(low[node],low[it]);

            if(low[it]>=in[node] && par!=-1)
            {
                ans.insert(node);
                //cout<<node<<" - "<<it<<" is a bridge"<<endl;
            }
            ++children;
        }
    }
    if(par==-1 && children>1)ans.insert(node);
